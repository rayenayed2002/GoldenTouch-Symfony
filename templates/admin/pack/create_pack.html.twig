use Stripe\Util\Set;
<!DOCTYPE html>
<html
  lang="en"
  class="light-style layout-navbar-fixed layout-menu-fixed"
  dir="ltr"
  data-theme="theme-default"
  data-assets-path="{{ asset('') }}"
  data-template="vertical-menu-template">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0" />
    <title>Create New Pack - Admin Dashboard</title>
    <meta name="description" content="Create a new event pack with advanced features" />

    <!-- Favicon -->
    <link rel="icon" type="image/x-icon" href="{{ asset('img/favicon/favicon.ico') }}" />

    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Public+Sans:wght@300;400;500;600;700&display=swap" rel="stylesheet" />

    <!-- Icons -->
    <link rel="stylesheet" href="{{ asset('vendor/fonts/fontawesome.css') }}" />
    <link rel="stylesheet" href="{{ asset('vendor/fonts/tabler-icons.css') }}" />
    <link rel="stylesheet" href="{{ asset('vendor/fonts/flag-icons.css') }}" />

    <!-- Core CSS -->
    <link rel="stylesheet" href="{{ asset('vendor/css/rtl/core.css') }}" class="template-customizer-core-css" />
    <link rel="stylesheet" href="{{ asset('vendor/css/rtl/theme-default.css') }}" class="template-customizer-theme-css" />
    <link rel="stylesheet" href="{{ asset('css/demo.css') }}" />

    <!-- Vendors CSS -->
    <link rel="stylesheet" href="{{ asset('vendor/libs/perfect-scrollbar/perfect-scrollbar.css') }}" />
    <link rel="stylesheet" href="{{ asset('vendor/libs/node-waves/node-waves.css') }}" />
    <link rel="stylesheet" href="{{ asset('vendor/libs/flatpickr/flatpickr.css') }}" />
    <link rel="stylesheet" href="{{ asset('vendor/libs/select2/select2.css') }}" />
    <link rel="stylesheet" href="{{ asset('vendor/libs/animate-css/animate.css') }}" />
    <link rel="stylesheet" href="{{ asset('vendor/libs/sweetalert2/sweetalert2.css') }}" />
    
    <!-- Page CSS -->
    <link rel="stylesheet" href="{{ asset('vendor/css/pages/cards-advance.css') }}" />
    
    <style>
        /* Glassmorphism Effects */
        .glassmorphism-ui {
            backdrop-filter: blur(10px);
            background: rgba(255, 255, 255, 0.7);
            border: 1px solid rgba(255, 255, 255, 0.18);
            box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.15);
            transition: all 0.3s ease;
        }

        .glass-panel {
            background: rgba(255, 255, 255, 0.85);
            border-radius: 16px;
            box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(5px);
            border: 1px solid rgba(255, 255, 255, 0.3);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .glass-panel:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 35px rgba(0, 0, 0, 0.15);
        }

        /* Form Elements */
        .form-control, .form-select {
            backdrop-filter: blur(4px);
            background: rgba(255, 255, 255, 0.9);
            border: 1px solid rgba(255, 255, 255, 0.18);
            transition: all 0.3s ease;
        }

        .form-control:focus, .form-select:focus {
            box-shadow: 0 0 0 0.25rem rgba(115, 103, 240, 0.15);
            border-color: #7367f0;
            background: rgba(255, 255, 255, 0.95);
            transform: translateY(-2px);
        }

        .form-floating label {
            transition: all 0.3s ease;
        }

        .form-floating .form-control:focus ~ label {
            color: #7367f0;
            font-weight: 500;
        }

        /* Buttons */
        .btn {
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            overflow: hidden;
        }

        .btn::after {
            content: '';
            position: absolute;
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
            pointer-events: none;
            background-image: radial-gradient(circle, #fff 10%, transparent 10.01%);
            transform: scale(10, 10);
            opacity: 0;
            transition: transform .5s, opacity 1s;
        }

        .btn:active::after {
            transform: scale(0, 0);
            opacity: .3;
            transition: 0s;
        }

        .btn-primary {
            box-shadow: 0 8px 25px -8px rgba(115, 103, 240, 0.5);
        }

        .btn-primary:hover {
            box-shadow: 0 8px 25px -5px rgba(115, 103, 240, 0.7);
            transform: translateY(-3px);
        }

        /* Animation Effects */
        .fade-in {
            animation: fadeIn 0.5s ease-in-out;
        }

        .slide-up {
            animation: slideUp 0.5s ease-in-out;
        }

        .pulse {
            animation: pulse 2s infinite;
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        @keyframes slideUp {
            from { transform: translateY(20px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }

        @keyframes pulse {
            0% { box-shadow: 0 0 0 0 rgba(115, 103, 240, 0.4); }
            70% { box-shadow: 0 0 0 10px rgba(115, 103, 240, 0); }
            100% { box-shadow: 0 0 0 0 rgba(115, 103, 240, 0); }
        }

        /* Form Validation Animation */
        .form-control.is-valid, .was-validated .form-control:valid {
            animation: validPulse 0.5s ease-in-out;
        }

        .form-control.is-invalid, .was-validated .form-control:invalid {
            animation: invalidShake 0.5s ease-in-out;
        }

        @keyframes validPulse {
            0% { box-shadow: 0 0 0 0 rgba(40, 199, 111, 0.4); }
            70% { box-shadow: 0 0 0 10px rgba(40, 199, 111, 0); }
            100% { box-shadow: 0 0 0 0 rgba(40, 199, 111, 0); }
        }

        @keyframes invalidShake {
            0%, 100% { transform: translateX(0); }
            20%, 60% { transform: translateX(-5px); }
            40%, 80% { transform: translateX(5px); }
        }

        /* Card Styles */
        .card {
            transition: all 0.3s ease;
            border: none;
            overflow: hidden;
        }

        .card-header {
            border-bottom: 1px solid rgba(115, 103, 240, 0.1);
            background: linear-gradient(to right, rgba(115, 103, 240, 0.1), rgba(255, 255, 255, 0));
        }

        /* Progress Bar */
        .progress-bar-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 3px;
            z-index: 1000;
            background: transparent;
        }

        .progress-bar {
            height: 100%;
            background: linear-gradient(to right, #7367f0, #9754cb);
            width: 0%;
            transition: width 0.3s ease;
        }

        /* Form Section Styles */
        .form-section {
            opacity: 0;
            transform: translateY(20px);
            transition: all 0.5s ease;
            position: absolute;
            width: 100%;
            left: 0;
            visibility: hidden;
            height: 0;
            overflow: hidden;
        }

        .form-section.active {
            opacity: 1;
            transform: translateY(0);
            position: relative;
            visibility: visible;
            height: auto;
            overflow: visible;
        }

        /* Step Indicator */
        .step-indicator {
            display: flex;
            justify-content: space-between;
            margin-bottom: 30px;
        }

        .step {
            flex: 1;
            text-align: center;
            position: relative;
        }

        .step-circle {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            background-color: #e0e0e0;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 10px;
            color: #fff;
            font-weight: bold;
            transition: all 0.3s ease;
        }

        .step.active .step-circle {
            background-color: #7367f0;
            box-shadow: 0 0 0 5px rgba(115, 103, 240, 0.2);
            transform: scale(1.2);
        }

        .step.completed .step-circle {
            background-color: #28c76f;
        }

        .step-title {
            font-size: 0.85rem;
            color: #6e6b7b;
            transition: all 0.3s ease;
        }

        .step.active .step-title {
            color: #7367f0;
            font-weight: 600;
        }

        .step-connector {
            position: absolute;
            top: 15px;
            height: 2px;
            background-color: #e0e0e0;
            width: 100%;
            left: -50%;
            z-index: -1;
        }

        .step:first-child .step-connector {
            display: none;
        }

        .step.completed .step-connector {
            background-color: #28c76f;
        }

        /* Responsive Adjustments */
        @media (max-width: 768px) {
            .glass-panel {
                margin: 10px;
                padding: 15px;
            }
            
            .row.g-3 {
                margin: 0 5px;
            }
            
            .btn {
                width: 100%;
                margin: 5px 0;
            }

            .step-title {
                font-size: 0.7rem;
            }
        }

        /* Background Effect */
        .bg-dots {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: -1;
            opacity: 0.4;
            background-image: radial-gradient(circle, #7367f0 1px, transparent 1px);
            background-size: 30px 30px;
        }

        /* Floating Labels Enhancement */
        .form-floating > .form-control:focus ~ label,
        .form-floating > .form-control:not(:placeholder-shown) ~ label {
            color: #7367f0;
            transform: scale(0.85) translateY(-0.5rem) translateX(0.15rem);
        }

        /* Image Upload Area */
        .image-upload-area {
            border: 2px dashed rgba(115, 103, 240, 0.4);
            border-radius: 12px;
            padding: 30px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            background: rgba(255, 255, 255, 0.5);
            margin-bottom: 20px;
        }

        .image-upload-area:hover, .image-upload-area.dragover {
            background-color: rgba(115, 103, 240, 0.1);
            border-color: #7367f0;
        }

        .image-upload-area .upload-icon {
            font-size: 3rem;
            color: #7367f0;
            margin-bottom: 10px;
            transition: transform 0.3s ease;
        }

        .image-upload-area:hover .upload-icon {
            transform: translateY(-5px);
        }

        #imagePreviewContainer {
            position: relative;
            max-width: 100%;
            border-radius: 8px;
            overflow: hidden;
            transition: transform 0.3s ease;
        }

        #imagePreviewContainer:hover {
            transform: scale(1.02);
        }

        #imagePreview {
            width: auto;
            max-width: 100%;
            height: auto;
            max-height: 200px;
            object-fit: contain;
            border-radius: 8px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }

        .review-image {
            max-height: 200px;
            object-fit: contain;
            border-radius: 8px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }

        /* Step indicator animation */
        .step {
            transition: all 0.5s cubic-bezier(0.34, 1.56, 0.64, 1);
        }

        .step.active .step-circle {
            background-color: #7367f0;
            color: white;
            transform: scale(1.2);
            box-shadow: 0 0 0 5px rgba(115, 103, 240, 0.2);
        }

        .step.completed .step-circle {
            background-color: #28c76f;
        }

        /* Shake animation for validation errors */
        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            20%, 60% { transform: translateX(-5px); }
            40%, 80% { transform: translateX(5px); }
        }

        .shake {
            animation: shake 0.6s cubic-bezier(0.36, 0.07, 0.19, 0.97) both;
        }

        /* Server Image Browser Styles */
        .server-browser {
            min-height: 300px;
        }
        
        .server-images-grid {
            max-height: 400px;
            overflow-y: auto;
        }
        
        .server-image-item {
            cursor: pointer;
            padding: 8px;
            border-radius: 8px;
            transition: all 0.2s ease;
            border: 2px solid transparent;
        }
        
        .server-image-item:hover {
            background-color: rgba(115, 103, 240, 0.05);
            transform: translateY(-2px);
        }
        
        .server-image-item.selected {
            border-color: #7367f0;
            background-color: rgba(115, 103, 240, 0.1);
            box-shadow: 0 0 0 4px rgba(115, 103, 240, 0.2);
        }
        
        .server-image-item img {
            width: 100%;
            height: 120px;
            object-fit: cover;
            border-radius: 6px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }
        
        .image-name {
            font-size: 0.8rem;
            color: #6e6b7b;
            text-align: center;
            margin-top: 5px;
        }
        
        .directory-path {
            font-size: 0.9rem;
            color: #6e6b7b;
        }
        
        /* Enhanced server image styling */
        .server-image-card {
            transition: all 0.2s ease-in-out;
            cursor: pointer;
            border: 2px solid transparent;
            overflow: hidden;
        }
        
        .server-image-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
        }
        
        .server-image-card.selected {
            border-color: #7367f0;
            box-shadow: 0 0 0 3px rgba(115, 103, 240, 0.25);
        }
        
        .card-img-container {
            height: 150px;
            overflow: hidden;
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: #f8f8f8;
        }
        
        .card-img-container img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
    </style>


    <!-- Helpers -->
    <script src="{{ asset('vendor/js/helpers.js') }}"></script>
    <script src="{{ asset('vendor/js/template-customizer.js') }}"></script>
    <script src="{{ asset('js/config.js') }}"></script>
    <!-- Compromise.js for keyword extraction (supports French/English) -->
    <script src="https://unpkg.com/compromise@13.11.3/builds/compromise.min.js"></script>
    <script src="https://unpkg.com/compromise/one.min.js"></script>
    <style>
        .tag-suggestions {
            margin-top: 0.5rem;
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
        }
        .tag-suggestion {
            background: #f3f0ff;
            color: #7367f0;
            border: 1px solid #e0e0e0;
            border-radius: 16px;
            padding: 0.25rem 0.75rem;
            font-size: 0.95rem;
            cursor: pointer;
            transition: background 0.2s;
        }
        .tag-suggestion.selected {
            background: #7367f0;
            color: #fff;
            border-color: #7367f0;
        }
        .tag-suggestion .remove-tag {
            margin-left: 0.5rem;
            color: #d33;
            cursor: pointer;
            font-weight: bold;
        }
    </style>

</head>

<body>
    <!-- Background Effect -->
    <div class="bg-dots"></div>

    <!-- Progress Bar -->
    <div class="progress-bar-container">
        <div class="progress-bar" id="formProgressBar"></div>
    </div>

    <!-- Layout wrapper -->
    <div class="layout-wrapper layout-content-navbar">
        <div class="layout-container">
            <!-- Menu -->
             <!-- Menu -->
          <aside id="layout-menu" class="layout-menu menu-vertical menu bg-menu-theme">
                <div class="app-brand demo">
                    <a href="index.html" class="app-brand-link">
                        <span class="app-brand-logo demo">
                            <svg width="32" height="22" viewBox="0 0 32 22" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path
                                    fill-rule="evenodd"
                                    clip-rule="evenodd"
                                    d="M0.00172773 0V6.85398C0.00172773 6.85398 -0.133178 9.01207 1.98092 10.8388L13.6912 21.9964L19.7809 21.9181L18.8042 9.88248L16.4951 7.17289L9.23799 0H0.00172773Z"
                                    fill="#7367F0" />
                                <path
                                    opacity="0.06"
                                    fill-rule="evenodd"
                                    clip-rule="evenodd"
                                    d="M7.69824 16.4364L12.5199 3.23696L16.5541 7.25596L7.69824 16.4364Z"
                                    fill="#161616" />
                                <path
                                    opacity="0.06"
                                    fill-rule="evenodd"
                                    clip-rule="evenodd"
                                    d="M8.07751 15.9175L13.9419 4.63989L16.5849 7.28475L8.07751 15.9175Z"
                                    fill="#161616" />
                                <path
                                    fill-rule="evenodd"
                                    clip-rule="evenodd"
                                    d="M7.77295 16.3566L23.6563 0H32V6.88383C32 6.88383 31.8262 9.17836 30.6591 10.4057L19.7824 22H13.6938L7.77295 16.3566Z"
                                    fill="#7367F0" />
                            </svg>
                        </span>
                        <span class="app-brand-text demo menu-text fw-bold">Golden Touch</span>
                    </a>

                   
                </div>

                <div class="menu-inner-shadow"></div>

                <ul class="menu-inner py-1">
                    <!-- Packs -->
                    <li class="menu-item active">
                        <a href="{{ path('admin_pack_index') }}" class="menu-link">
                            <i class="menu-icon tf-icons ti ti-package"></i>
                            <div data-i18n="Packs">Packs</div>
                        </a>
                    </li>

                    <!-- Gestion Événements -->
                    <li class="menu-item">
                        <a href="{{ path('app_events_admin') }}" class="menu-link menu-toggle">
                            <i class="menu-icon tf-icons ti ti-calendar-event"></i>
                            <div data-i18n="Gestion Événements">Gestion Événements</div>
                        </a>
                        <ul class="menu-sub">
                            <li class="menu-item">
                                <a href="{{ path('app_add_event') }}" class="menu-link">
                                    <i class="menu-icon tf-icons ti ti-circle"></i>
                                    <div data-i18n="Ajouter Événement">Ajouter Événement</div>
                                </a>
                            </li>
                            <li class="menu-item">
                                <a href="liste-evenements.html" class="menu-link">
                                    <i class="menu-icon tf-icons ti ti-circle"></i>
                                    <div data-i18n="Liste Événements">Liste Événements</div>
                                </a>
                            </li>
                        </ul>
                    </li>

                    <!-- Gestion Matérielle -->
                    <li class="menu-item">
                        <a href="{{ path('app_materielss') }}" class="menu-link menu-toggle">
                            <i class="menu-icon tf-icons ti ti-tools"></i>
                            <div data-i18n="Gestion Matérielle">Gestion Matérielle</div>
                        </a>
                        <ul class="menu-sub">
                            <li class="menu-item">
                                <a href="ajouter-materiel.html" class="menu-link">
                                    <i class="menu-icon tf-icons ti ti-circle"></i>
                                    <div data-i18n="Ajouter Matériel">Ajouter Matériel</div>
                                </a>
                            </li>
                            <li class="menu-item">
                                <a href="liste-materiel.html" class="menu-link">
                                    <i class="menu-icon tf-icons ti ti-circle"></i>
                                    <div data-i18n="Liste Matériel">Liste Matériel</div>
                                </a>
                            </li>
                        </ul>
                    </li>

                    <!-- Gestion Lieu -->
                    <li class="menu-item">
                        <a href="{{ path('admin_lieu_index') }}" class="menu-link menu-toggle">
                            <i class="menu-icon tf-icons ti ti-map-pin"></i>
                            <div data-i18n="Gestion Lieu">Gestion Lieu</div>
                        </a>
                        <ul class="menu-sub">
                            <li class="menu-item">
                                <a href="ajouter-lieu.html" class="menu-link">
                                    <i class="menu-icon tf-icons ti ti-circle"></i>
                                    <div data-i18n="Ajouter Lieu">Ajouter Lieu</div>
                                </a>
                            </li>
                            <li class="menu-item">
                                <a href="liste-lieux.html" class="menu-link">
                                    <i class="menu-icon tf-icons ti ti-circle"></i>
                                    <div data-i18n="Liste Lieux">Liste Lieux</div>
                                </a>
                            </li>
                        </ul>
                    </li>

                    <!-- Gestion Personnels -->
                    <li class="menu-item">
                        <a href="{{ path('app_perso_index') }}" class="menu-link menu-toggle">
                            <i class="menu-icon tf-icons ti ti-users"></i>
                            <div data-i18n="Gestion Personnels">Gestion Personnels</div>
                        </a>
                        <ul class="menu-sub">
                            <li class="menu-item">
                                <a href="ajouter-personnel.html" class="menu-link">
                                    <i class="menu-icon tf-icons ti ti-circle"></i>
                                    <div data-i18n="Ajouter Personnel">Ajouter Personnel</div>
                                </a>
                            </li>
                            <li class="menu-item">
                                <a href="liste-personnels.html" class="menu-link">
                                    <i class="menu-icon tf-icons ti ti-circle"></i>
                                    <div data-i18n="Liste Personnels">Liste Personnels</div>
                                </a>
                            </li>
                        </ul>
                    </li>

                    <!-- Gestion Commandes -->
                    <li class="menu-item">
                        <a href="{{ path('app_my_Commandes_admin') }}" class="menu-link menu-toggle">
                            <i class="menu-icon tf-icons ti ti-shopping-cart"></i>
                            <div data-i18n="Gestion Commandes">Gestion Commandes</div>
                        </a>
                        <ul class="menu-sub">
                            <li class="menu-item">
                                <a href="panier.html" class="menu-link">
                                    <i class="menu-icon tf-icons ti ti-circle"></i>
                                    <div data-i18n="Panier">Panier</div>
                                    <div class="badge bg-label-primary rounded-pill ms-auto">3</div>
                                </a>
                            </li>
                            <li class="menu-item">
                                <a href="liste-commandes.html" class="menu-link">
                                    <i class="menu-icon tf-icons ti ti-circle"></i>
                                    <div data-i18n="Liste Commandes">Liste Commandes</div>
                                </a>
                            </li>
                            <li class="menu-item">
                                <a href="liste-reclamations.html" class="menu-link">
                                    <i class="menu-icon tf-icons ti ti-circle"></i>
                                    <div data-i18n="Liste Réclamations">Liste Réclamations</div>
                                    <div class="badge bg-label-warning rounded-pill ms-auto">2</div>
                                </a>
                            </li>
                        </ul>
                    </li>

                    <!-- Divider -->
                    <li class="menu-header small text-uppercase">
                        <span class="menu-header-text">Compte</span>
                    </li>

                    <!-- Compte -->
                    <li class="menu-item">
                        <a href="compte.html" class="menu-link">
                            <i class="menu-icon tf-icons ti ti-user"></i>
                            <div data-i18n="Mon Compte">Mon Compte</div>
                        </a>
                    </li>

                    <!-- Déconnexion -->
                    <li class="menu-item">
                        <a href="deconnexion.html" class="menu-link">
                            <i class="menu-icon tf-icons ti ti-logout"></i>
                            <div data-i18n="Déconnexion">Déconnexion</div>
                        </a>
                    </li>
                </ul>
            </aside>
            <!-- / Menu -->

            <!-- Layout page -->
            <div class="layout-page">
                <!-- Navbar -->
                <nav class="layout-navbar container-xxl navbar navbar-expand-xl navbar-detached align-items-center bg-navbar-theme" id="layout-navbar">
                    <div class="navbar-nav-right d-flex align-items-center" id="navbar-collapse">
                        <div class="navbar-nav align-items-center">
                            <div class="nav-item navbar-search-wrapper mb-0">
                                <span class="d-none d-md-inline-block">Golden Touch Admin</span>
                            </div>
                        </div>
                    </div>
                </nav>
                <!-- / Navbar -->

                <!-- Content wrapper -->
                <div class="content-wrapper">
                    <!-- Content -->
                    <div class="container-xxl flex-grow-1 container-p-y">
                        <div class="row">
                            <div class="col-12">
                                <div class="card glassmorphism-ui mb-4 fade-in">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h4 class="mb-0"><i class="ti ti-package me-2"></i>Créer un nouveau pack</h4>
        <a href="{{ path('admin_pack_index') }}" class="btn btn-label-secondary">
            <i class="ti ti-arrow-left me-1"></i>Retour aux packs
        </a>
    </div>
</div>
                                    <div class="card-body">
    <!-- Indicateur d'étapes -->
    <div class="step-indicator mb-4">
        <div class="step active" data-step="1">
            <div class="step-circle">1</div>
            <div class="step-connector"></div>
            <div class="step-title">Informations de base</div>
        </div>
        <div class="step" data-step="2">
            <div class="step-circle">2</div>
            <div class="step-connector"></div>
            <div class="step-title">Détails</div>
        </div>
        <div class="step" data-step="3">
            <div class="step-circle">3</div>
            <div class="step-connector"></div>
            <div class="step-title">Médias</div>
        </div>
        <div class="step" data-step="4">
            <div class="step-circle">4</div>
            <div class="step-title">Vérification</div>
        </div>
    </div>
</div>

                                        <!-- Pack Creation Form -->
                                        <form id="createPackForm" class="needs-validation" novalidate>
                                            <!-- Step 1: Basic Info -->
                                            <div class="form-section active" id="step1">
                                                <div class="row g-3">
                                                    <!-- Event selection removed as it will be created automatically -->
                                                    <div class="col-md-6">
                                                        <div class="form-floating mb-3">
                                                            <select class="form-select" id="category" name="category" required>
                                                                <option value="" selected disabled>Sélectionnez une catégorie</option>
                                                                <option value="Mariage">Mariage</option>
                                                                <option value="Anniversaire">Anniversaire</option>
                                                                <option value="Conférence">Conférence</option>
                                                                <option value="Séminaire">Séminaire</option>
                                                                <option value="Autre">Autre</option>
                                                            </select>
                                                            <label for="category">Catégorie</label>
<div class="invalid-feedback">Veuillez sélectionner une catégorie.</div>
                                                        </div>
                                                    </div>
                                                    <div class="col-12">
    <div class="form-floating mb-3">
        <input type="text" class="form-control" id="packName" name="packName" placeholder="Nom du pack" required>
        <label for="packName">Nom du pack</label>
        <div class="invalid-feedback">Veuillez saisir un nom pour le pack.</div>
    </div>
</div>
<div class="col-12">
    <div class="form-floating mb-3 position-relative">
    <textarea class="form-control" id="description" name="description" style="height: 100px" placeholder="Description" required></textarea>
    <label for="description">Description</label>
    <div class="invalid-feedback">Veuillez saisir une description.</div>
    <button type="button" id="enhanceDescriptionBtn" class="btn btn-sm btn-outline-primary position-absolute" style="top: 8px; right: 8px; z-index: 2;">
        🔄 Améliorer le texte
    </button>
    <span id="enhanceLoading" class="spinner-border spinner-border-sm text-primary position-absolute" style="top: 12px; right: 170px; display: none; z-index: 2;" role="status"></span>
</div>
</div>
<div class="col-12">
    <div id="tagSuggestionContainer">
        <label class="form-label" style="margin-bottom: 0.25rem;">Suggestions de tags :</label>
        <div class="tag-suggestions" id="tagSuggestions"></div>
        <input type="hidden" name="tags" id="selectedTags">
    </div>
</div>
</div>
<div class="d-flex justify-content-end mt-3">
    <button type="button" class="btn btn-primary next-step" data-next="2">
        Suivant <i class="ti ti-arrow-right ms-1"></i>
    </button>
</div>
</div>

                                            <!-- Step 2: Details -->
                                           <div class="form-section" id="step2">
    <div class="row g-3">
        <div class="col-md-6">
            <div class="form-floating mb-3">
                <div class="input-group input-group-merge">
                    <span class="input-group-text">$</span>
                    <div class="form-floating">
                        <input type="number" class="form-control" id="prix" name="prix" placeholder="Prix" step="0.01" min="0" required>
                        <label for="prix">Prix</label>
                    </div>
                </div>
                <div class="invalid-feedback">Veuillez saisir un prix valide.</div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-floating mb-3">
                <input type="number" class="form-control" id="capacite" name="capacite" placeholder="Capacité" min="1" required>
                <label for="capacite">Capacité</label>
                <div class="invalid-feedback">Veuillez saisir une capacité valide.</div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-floating mb-3">
                <input type="number" class="form-control" id="duree" name="duree" placeholder="Durée" min="1" required>
                <label for="duree">Durée (heures)</label>
                <div class="invalid-feedback">Veuillez saisir une durée valide.</div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-floating mb-3">
                <input type="text" class="form-control flatpickr" id="date" name="date" placeholder="Date de début" required data-default-date="today">
                <label for="date">Date de début</label>
                <div class="invalid-feedback">Veuillez saisir une date de début.</div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-floating mb-3">
                <input type="text" class="form-control flatpickr" id="endDate" name="endDate" placeholder="Date de fin">
                <label for="endDate">Date de fin (optionnel)</label>
            </div>
        </div>
    </div>
    <div class="d-flex justify-content-between mt-3">
        <button type="button" class="btn btn-label-secondary prev-step" data-prev="1">
            <i class="ti ti-arrow-left me-1"></i> Précédent
        </button>
        <button type="button" class="btn btn-primary next-step" data-next="3">
            Suivant <i class="ti ti-arrow-right ms-1"></i>
        </button>
    </div>
</div>

<!-- Étape 3 : Médias -->
<div class="form-section" id="step3">
    <div class="row g-3">
        <div class="col-12">
            <label class="form-label">Image du pack</label>
            <ul class="nav nav-tabs mb-3" role="tablist">
                <li class="nav-item">
                    <button class="nav-link active" id="upload-tab" data-bs-toggle="tab" data-bs-target="#upload-content" type="button" role="tab" aria-controls="upload-content" aria-selected="true">
                        <i class="ti ti-upload me-1"></i> Téléverser une image
                    </button>
                </li>
                <li class="nav-item">
                    <button class="nav-link" id="server-tab" data-bs-toggle="tab" data-bs-target="#server-content" type="button" role="tab" aria-controls="server-content" aria-selected="false">
                        <i class="ti ti-server me-1"></i> Sélectionner depuis le serveur
                    </button>
                </li>
            </ul>
            <div class="tab-content">
                <!-- Onglet Téléversement -->
                <div class="tab-pane fade show active" id="upload-content" role="tabpanel" aria-labelledby="upload-tab">
                    <div class="image-upload-area" id="imageUploadArea">
                        <input type="file" id="packImage" name="packImage" accept="image/*" class="d-none">
                        <div id="imageUploadPlaceholder">
                            <i class="ti ti-upload upload-icon mb-2"></i>
                            <h6>Déposez votre image ici ou cliquez pour parcourir</h6>
                            <p class="text-muted small">Formats supportés : JPG, PNG ou GIF (max 5MB)</p>
                        </div>
                        <div id="imagePreviewContainer" class="text-center mt-3 d-none">
                            <img id="imagePreview" class="img-fluid rounded shadow-sm" style="max-height: 200px;">
                            <div class="mt-2">
                                <button type="button" class="btn btn-sm btn-outline-danger" id="removeImage">
                                    <i class="ti ti-trash me-1"></i> Supprimer
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Onglet Serveur -->
                <div class="tab-pane fade" id="server-content" role="tabpanel" aria-labelledby="server-tab">
                    <div class="server-browser glass-panel p-3">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <div class="directory-path">
                                <span class="badge bg-label-primary">
                                    <i class="ti ti-folder me-1"></i> uploads/packs/Images
                                </span>
                            </div>
                            <button type="button" id="refreshServerImages" class="btn btn-sm btn-outline-primary">
                                <i class="ti ti-refresh me-1"></i> Actualiser
                            </button>
                        </div>
                        
                        <div id="serverImagesContainer" class="row g-3 server-images-grid">
                            <div class="col-12 text-center py-5">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Chargement...</span>
                                </div>
                                <p class="mt-2">Chargement des images...</p>
                            </div>
                        </div>
                        
                        <input type="hidden" id="selectedServerImage" name="selectedServerImage">
                    </div>
                </div>
            </div>
        </div>
        <div class="col-12 mt-4">
            <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" id="featuredPack" name="featuredPack">
                <label class="form-check-label" for="featuredPack">Mettre en avant sur la page d'accueil</label>
            </div>
        </div>
    </div>
    <div class="d-flex justify-content-between mt-3">
        <button type="button" class="btn btn-label-secondary prev-step" data-prev="2">
            <i class="ti ti-arrow-left me-1"></i> Précédent
        </button>
        <button type="button" class="btn btn-primary next-step" data-next="4">
            Vérification <i class="ti ti-arrow-right ms-1"></i>
        </button>
    </div>
</div>

<!-- Étape 4 : Vérification -->
<div class="form-section" id="step4">
    <div class="row">
        <div class="col-12">
            <div class="card glass-panel mb-4">
                <div class="card-header">
                    <h5 class="mb-0">Résumé du pack</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-4 mb-4">
                            <div class="review-image-container mx-auto text-center">
                                <img id="reviewImage" src="" alt="Aperçu du pack" class="img-fluid rounded shadow-sm mb-2 review-image">
                                <div id="reviewNoImage" class="text-muted rounded p-3 bg-light text-center">
                                    <i class="ti ti-photo-off fs-1 text-secondary mb-2"></i>
                                    <p class="mb-0">Aucune image sélectionnée</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-8">
                            <div class="row g-3">
                                <div class="col-md-6">
                                    <h6 class="text-muted fw-normal">Nom du pack :</h6>
                                    <p id="reviewPackName" class="fw-semibold"></p>
                                </div>
                                <div class="col-md-6">
                                    <h6 class="text-muted fw-normal">Catégorie :</h6>
                                    <p id="reviewCategory" class="fw-semibold"></p>
                                </div>
                                <div class="col-md-6">
                                    <h6 class="text-muted fw-normal">Prix :</h6>
                                    <p id="reviewPrice" class="fw-semibold text-primary"></p>
                                </div>
                                <div class="col-md-6">
                                    <h6 class="text-muted fw-normal">Capacité :</h6>
                                    <p id="reviewCapacity" class="fw-semibold"></p>
                                </div>
                                <div class="col-md-6">
                                    <h6 class="text-muted fw-normal">Durée :</h6>
                                    <p id="reviewDuration" class="fw-semibold"></p>
                                </div>
                                <div class="col-md-6">
                                    <h6 class="text-muted fw-normal">Date de début :</h6>
                                    <p id="reviewStartDate" class="fw-semibold"></p>
                                </div>
                                <div class="col-md-6">
                                    <h6 class="text-muted fw-normal">Date de fin :</h6>
                                    <p id="reviewEndDate" class="fw-semibold"></p>
                                </div>
                                <div class="col-md-6">
                                    <h6 class="text-muted fw-normal">Mis en avant :</h6>
                                    <p id="reviewFeatured" class="fw-semibold"></p>
                                </div>
                                <div class="col-12">
                                    <h6 class="text-muted fw-normal">Description :</h6>
                                    <p id="reviewDescription" class="fw-semibold"></p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="d-flex justify-content-between mt-3">
        <button type="button" class="btn btn-label-secondary prev-step" data-prev="3">
            <i class="ti ti-arrow-left me-1"></i> Précédent
        </button>
        <button type="submit" class="btn btn-primary pulse">
            <i class="ti ti-check me-1"></i> Créer le pack
        </button>
    </div>
</div>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Core JS -->
    <script src="{{ asset('vendor/libs/jquery/jquery.js') }}"></script>
    <script src="{{ asset('vendor/libs/popper/popper.js') }}"></script>
    <script src="{{ asset('vendor/js/bootstrap.js') }}"></script>
    <script src="{{ asset('vendor/libs/perfect-scrollbar/perfect-scrollbar.js') }}"></script>
    <script src="{{ asset('vendor/libs/node-waves/node-waves.js') }}"></script>
    <script src="{{ asset('vendor/libs/hammer/hammer.js') }}"></script>
    <script src="{{ asset('vendor/js/menu.js') }}"></script>

    <!-- Vendors JS -->
    <script src="{{ asset('vendor/libs/flatpickr/flatpickr.js') }}"></script>
    <script src="{{ asset('vendor/libs/select2/select2.full.min.js') }}"></script>
    <script src="{{ asset('vendor/libs/sweetalert2/sweetalert2.js') }}"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // --- Smart Description Enhancer ---
            const enhanceBtn = document.getElementById('enhanceDescriptionBtn');
            const descriptionField = document.getElementById('description');
            const enhanceLoading = document.getElementById('enhanceLoading');
            enhanceBtn.addEventListener('click', async function() {
                const text = descriptionField.value.trim();
                if (!text) {
                    descriptionField.classList.add('is-invalid');
                    return;
                }
                // UI: show loading spinner
                enhanceBtn.disabled = true;
                enhanceLoading.style.display = '';
                // Remove previous error
                let errorDiv = document.getElementById('enhanceError');
                if (errorDiv) errorDiv.remove();
                try {
                    const resp = await fetch('/admin/pack/enhance-description', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                        body: 'description=' + encodeURIComponent(text)
                    });
                    const result = await resp.json();
                    if (result.enhanced && result.generated_text) {
                        descriptionField.value = result.generated_text;
                        // Show fallback warning if grammar API failed
                        if (result.used_fallback && result.hf_error) {
                            showEnhanceError('Correction grammaticale indisponible : ' + result.hf_error);
                        }
                        if (result.used_local_grammar_fallback) {
                            showEnhanceError('Correction grammaticale locale appliquée (simple, non IA).');
                        }
                        // Show Vibe/Emoji/Mood
                        showVibe(result);
                    } else if (result.message) {
                        showEnhanceError(result.message);
                    }
                } catch (e) {
                    showEnhanceError('Erreur lors de l\'amélioration de la description.');
                } finally {
                    enhanceBtn.disabled = false;
                    enhanceLoading.style.display = 'none';
                }
            });
            // Helper to show error/warning
            function showEnhanceError(msg) {
                let errorDiv = document.createElement('div');
                errorDiv.id = 'enhanceError';
                errorDiv.className = 'alert alert-warning mt-2';
                errorDiv.innerText = msg;
                descriptionField.parentNode.appendChild(errorDiv);
            }
            // Helper to show vibe/emoji/mood
            function showVibe(result) {
                let vibeDiv = document.getElementById('vibeDisplay');
                if (vibeDiv) vibeDiv.remove();
                vibeDiv = document.createElement('div');
                vibeDiv.id = 'vibeDisplay';
                vibeDiv.className = 'mt-2';
                if (result.vibe_error) {
                    vibeDiv.innerHTML = '<span class="alert alert-warning">Détection du mood/emoji indisponible : ' + result.vibe_error + '</span>';
                } else if (result.emoji && result.mood_tag) {
                    vibeDiv.innerHTML = `<span style="font-size:1.6em;">${result.emoji}</span> <span class="badge bg-primary">#${result.mood_tag}</span>`;
                } else {
                    vibeDiv.innerHTML = '';
                }
                descriptionField.parentNode.appendChild(vibeDiv);
            }
        
            // --- Smart Tagging Logic ---
            const packNameInput = document.getElementById('packName');
            const descriptionInput = document.getElementById('description');
            const tagSuggestionsDiv = document.getElementById('tagSuggestions');
            const selectedTagsInput = document.getElementById('selectedTags');
            let suggestedTags = [];
            let selectedTags = [];
            // French stopwords for filtering
            const stopwords = [
                'avec','et','au','aux','le','la','les','un','une','des','du','de','en','à','pour','par','sur','dans','chez','ou','mais','donc','or','ni','car','ce','cette','ces','mon','ma','mes','ton','ta','tes','son','sa','ses','notre','nos','votre','vos','leur','leurs','plus','moins','aussi','très','bien','mal','comme','que','qui','quoi','dont','où','si','là','ici','on','nous','vous','ils','elles','il','elle','je','tu','me','te','se','y','ne','pas','plus','tout','tous','toute','toutes','aucun','aucune','chaque','plusieurs','certains','certaines','autre','autres','même','mêmes','sans','sous','après','avant','depuis','pendant','vers','entre','chez','contre','selon','suite','afin','ainsi','alors','après','aujourd\'hui','autant','autrefois','autrement','avant','avec','bien','bientôt','car','cependant','certes','combien','comme','comment','d\'accord','d\'ailleurs','dans','dehors','déjà','depuis','désormais','donc','dos','droite','du','elle','elles','en','encore','enfin','ensuite','entre','envers','environ','est','et','etc','étaient','état','étions','été','être','eu','eux','fait','faites','fois','font','force','haut','hors','ici','il','ils','je','juste','là','la','le','les','leur','lui','ma','maintenant','mais','mes','mien','mienne','miennes','miens','moi','moins','mon','mot','même','ni','nommés','notre','nous','nouveaux','ou','où','par','parce','parole','pas','personnes','peu','peut','plupart','pour','pourquoi','quand','que','quel','quelle','quelles','quels','qui','sa','sans','ses','seulement','si','sien','sienne','siennes','siens','sinon','soi','soit','sommes','son','sont','sous','soyez','sujet','sur','ta','tandis','te','tellement','tels','tes','ton','tous','tout','trop','très','tu','valeur','voie','voient','vont','votre','vous','vu','ça','étaient','état','étions','été','être','avoir','a','au','aux','ce','ces','dans','des','du','elle','en','et','eux','il','je','la','le','leur','lui','ma','mais','me','même','mes','moi','mon','ne','nos','notre','nous','on','ou','par','pas','pour','qu','que','qui','sa','se','ses','son','sur','ta','te','tes','toi','ton','tu','un','une','vos','votre','vous','c','d','j','l','à','m','n','s','t','y','été','étée','étées','étés','étant','suis','es','est','sommes','êtes','sont','serai','seras','sera','serons','serez','seront','serais','serait','serions','seriez','seraient','étais','était','étions','étiez','étaient','fus','fut','fûmes','fûtes','furent','sois','soit','soyons','soyez','soient','fusse','fusses','fût','fussions','fussiez','fussent','ayant','eu','eue','eues','eus','ai','as','avons','avez','ont','aurai','auras','aura','aurons','aurez','auront','aurais','aurait','aurions','auriez','auraient','avais','avait','avions','aviez','avaient','eut','eûmes','eûtes','eurent','aie','aies','ait','ayons','ayez','aient','eusse','eusses','eût','eussions','eussiez','eussent','ceci','cela','celà','cet','cette','ici','ils','les','leurs','quel','quels','quelle','quelles','sans','soi']

            function extractKeywords(text) {
                if (!text) return [];
                if (typeof window.nlp !== 'function') {
                    // nlp.js not loaded, warn user and disable suggestions
                    let warn = document.getElementById('tagSuggestionWarning');
                    if (!warn) {
                        warn = document.createElement('div');
                        warn.id = 'tagSuggestionWarning';
                        warn.className = 'alert alert-warning mt-2';
                        warn.innerText = "Suggestions de tags désactivées : bibliothèque NLP non chargée.";
                        tagSuggestionsDiv.parentNode.insertBefore(warn, tagSuggestionsDiv);
                    }
                    return [];
                } else {
                    let warn = document.getElementById('tagSuggestionWarning');
                    if (warn) warn.remove();
                }
                let doc = window.nlp(text, {language: 'fr'});
                let nouns = doc.nouns().out('array');
                let terms = doc.terms().out('array');
                let keywords = [...nouns, ...terms]
                    .map(w => w.trim())
                    .filter(w => w.length > 2 && !stopwords.includes(w.toLowerCase()))
                    .map(w => w.charAt(0).toUpperCase() + w.slice(1).toLowerCase());
                // Remove duplicates
                return [...new Set(keywords)];
            }

            function updateTagSuggestions() {
                const nameVal = packNameInput.value;
                const descVal = descriptionInput.value;
                const keywords = extractKeywords(nameVal + ' ' + descVal);
                // Remove already selected tags
                suggestedTags = keywords.filter(tag => !selectedTags.includes(tag));
                renderTagSuggestions();
            }

            function renderTagSuggestions() {
                tagSuggestionsDiv.innerHTML = '';
                // Show selected tags first
                selectedTags.forEach(tag => {
                    const tagEl = document.createElement('span');
                    tagEl.className = 'tag-suggestion selected';
                    tagEl.textContent = tag;
                    const removeBtn = document.createElement('span');
                    removeBtn.className = 'remove-tag';
                    removeBtn.innerHTML = '&times;';
                    removeBtn.onclick = () => {
                        selectedTags = selectedTags.filter(t => t !== tag);
                        updateTagSuggestions();
                        updateSelectedTagsInput();
                    };
                    tagEl.appendChild(removeBtn);
                    tagSuggestionsDiv.appendChild(tagEl);
                });
                // Suggested tags
                suggestedTags.forEach(tag => {
                    const tagEl = document.createElement('span');
                    tagEl.className = 'tag-suggestion';
                    tagEl.textContent = tag;
                    tagEl.onclick = () => {
                        selectedTags.push(tag);
                        updateTagSuggestions();
                        updateSelectedTagsInput();
                    };
                    tagSuggestionsDiv.appendChild(tagEl);
                });
            }

            function updateSelectedTagsInput() {
                selectedTagsInput.value = selectedTags.join(',');
            }

            packNameInput.addEventListener('input', updateTagSuggestions);
            descriptionInput.addEventListener('input', updateTagSuggestions);
            // Initial render
            updateTagSuggestions();
        
            const form = document.getElementById('createPackForm');
            const formSections = document.querySelectorAll('.form-section');
            const steps = document.querySelectorAll('.step');
            const progressBar = document.getElementById('formProgressBar');
            let currentStep = 1;
        
            // Function to validate current step
            function validateStep(step) {
                let isValid = true;
                const fields = document.querySelectorAll(`#step${step} .form-control, #step${step} .form-select`);
                
                fields.forEach(field => {
                    const value = field.value.trim();
                    const name = field.getAttribute('name');
                    
                    if (field.hasAttribute('required') && value === '') {
                        isValid = false;
                        field.classList.add('is-invalid');
                        field.classList.remove('is-valid');
                        
                        // Add custom error message for required fields
                        let errorMsg = 'Ce champ est requis.';
                        
                        // Show corresponding validation message based on field name
                        switch(name) {
                            case 'packName':
                                errorMsg = 'Le nom du pack est requis.';
                                break;
                            case 'prix':
                                errorMsg = 'Le prix est requis.';
                                break;
                            case 'capacite':
                                errorMsg = 'La capacité est requise.';
                                break;
                            case 'duree':
                                errorMsg = 'La durée est requise.';
                                break;
                            case 'date':
                                errorMsg = 'La date de début est requise.';
                                break;
                            case 'endDate':
                                errorMsg = 'La date de fin est requise.';
                                break;
                            case 'description':
                                errorMsg = 'La description est requise.';
                                break;
                            case 'category':
                                errorMsg = 'La catégorie est requise.';
                                break;
                        }
                        
                        // Find or create validation message element
                        let feedback = field.nextElementSibling;
                        if (!feedback || !feedback.classList.contains('invalid-feedback')) {
                            feedback = document.createElement('div');
                            feedback.className = 'invalid-feedback';
                            field.parentNode.appendChild(feedback);
                        }
                        feedback.textContent = errorMsg;
                    } else if (name === 'prix' && (isNaN(value) || parseFloat(value) <= 0)) {
                        isValid = false;
                        field.classList.add('is-invalid');
                        field.classList.remove('is-valid');
                        
                        // Find or create validation message element
                        let feedback = field.nextElementSibling;
                        if (!feedback || !feedback.classList.contains('invalid-feedback')) {
                            feedback = document.createElement('div');
                            feedback.className = 'invalid-feedback';
                            field.parentNode.appendChild(feedback);
                        }
                        feedback.textContent = 'Le prix doit être un nombre positif.';
                    } else if (name === 'capacite' && (isNaN(value) || parseInt(value) <= 0)) {
                        isValid = false;
                        field.classList.add('is-invalid');
                        field.classList.remove('is-valid');
                        
                        // Find or create validation message element
                        let feedback = field.nextElementSibling;
                        if (!feedback || !feedback.classList.contains('invalid-feedback')) {
                            feedback = document.createElement('div');
                            feedback.className = 'invalid-feedback';
                            field.parentNode.appendChild(feedback);
                        }
                        feedback.textContent = 'La capacité doit être un nombre positif.';
                    } else if (name === 'duree' && (isNaN(value) || parseInt(value) <= 0)) {
                        isValid = false;
                        field.classList.add('is-invalid');
                        field.classList.remove('is-valid');
                        
                        // Find or create validation message element
                        let feedback = field.nextElementSibling;
                        if (!feedback || !feedback.classList.contains('invalid-feedback')) {
                            feedback = document.createElement('div');
                            feedback.className = 'invalid-feedback';
                            field.parentNode.appendChild(feedback);
                        }
                        feedback.textContent = 'La durée doit être un nombre positif.';
                    } else if (name === 'endDate' && document.querySelector('[name="date"]').value !== '') {
                        const startDate = new Date(document.querySelector('[name="date"]').value);
                        const endDate = new Date(value);
                        
                        if (endDate < startDate) {
                            isValid = false;
                            field.classList.add('is-invalid');
                            field.classList.remove('is-valid');
                            
                            // Find or create validation message element
                            let feedback = field.nextElementSibling;
                            if (!feedback || !feedback.classList.contains('invalid-feedback')) {
                                feedback = document.createElement('div');
                                feedback.className = 'invalid-feedback';
                                field.parentNode.appendChild(feedback);
                            }
                            feedback.textContent = 'La date de fin doit être après la date de début.';
                        } else {
                            field.classList.remove('is-invalid');
                            field.classList.add('is-valid');
                        }
                    } else {
                        field.classList.remove('is-invalid');
                        field.classList.add('is-valid');
                    }
                });
                
                return isValid;
            }
        
            // Function to update progress bar
            function updateProgress() {
                const progress = ((currentStep - 1) / (formSections.length - 1)) * 100;
                progressBar.style.width = `${progress}%`;
            }
        
            // Function to update progress bar with custom value
            function updateProgressBar(value) {
                progressBar.style.width = `${value}%`;
            }
        
            // Function to show step
            function showStep(step) {
                formSections.forEach(section => section.classList.remove('active'));
                steps.forEach(s => s.classList.remove('active'));
        
                document.getElementById('step' + step).classList.add('active');
                steps[step - 1].classList.add('active');
        
                // Update completed steps
                steps.forEach((s, index) => {
                    if (index < step - 1) {
                        s.classList.add('completed');
                    } else {
                        s.classList.remove('completed');
                    }
                });
        
                updateProgress();
            }
        
            // Function to show errors
            function showErrors(errors) {
                let errorMessage = '';
                if (Array.isArray(errors)) {
                    errorMessage = errors.join('<br>');
                } else {
                    errorMessage = errors;
                }
                
                Swal.fire({
                    title: 'Error!',
                    html: errorMessage,
                    icon: 'error',
                    customClass: {
                        confirmButton: 'btn btn-primary'
                    },
                    buttonsStyling: false
                });
            }
        
            // Handle next button clicks
            document.querySelectorAll('.next-step').forEach(button => {
                button.addEventListener('click', function() {
                    const nextStep = parseInt(this.dataset.next);
                    
                    if (validateStep(currentStep)) {
                        currentStep = nextStep;
                        showStep(currentStep);
                        
                        // Update review information when going to step 4
                        if (nextStep === 4) {
                            updateReviewInfo();
                        }
                    } else {
                        // Show validation error message
                        Swal.fire({
                            title: 'Validation Error',
                            text: 'Veuillez remplir tous les champs obligatoires avant de continuer.',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    }
                });
            });
        
            // Handle back button clicks
            document.querySelectorAll('.prev-step').forEach(button => {
                button.addEventListener('click', function() {
                    const prevStep = parseInt(this.dataset.prev);
                    currentStep = prevStep;
                    showStep(currentStep);
                });
            });
            
            // Function to update review information
            function updateReviewInfo() {
                document.getElementById('reviewCategory').textContent = document.getElementById('category').value;
                document.getElementById('reviewPackName').textContent = document.getElementById('packName').value;
                document.getElementById('reviewPrice').textContent = document.getElementById('prix').value + ' €';
                document.getElementById('reviewCapacity').textContent = document.getElementById('capacite').value + ' personnes';
                document.getElementById('reviewDuration').textContent = document.getElementById('duree').value + ' heures';
                document.getElementById('reviewDescription').textContent = document.getElementById('description').value;
                
                const startDate = document.getElementById('date').value;
                document.getElementById('reviewStartDate').textContent = startDate ? startDate : '-';
                
                const endDate = document.getElementById('endDate').value;
                document.getElementById('reviewEndDate').textContent = endDate ? endDate : 'Non spécifié';
                
                if (document.getElementById('featuredPack')) {
                    document.getElementById('reviewFeatured').textContent = document.getElementById('featuredPack').checked ? 'Oui' : 'Non';
                }
                
                // Check if image is selected
                if (document.getElementById('imagePreview').src && document.getElementById('imagePreview').src !== window.location.href) {
                    document.getElementById('reviewImage').src = document.getElementById('imagePreview').src;
                    document.getElementById('reviewImage').classList.remove('d-none');
                    document.getElementById('reviewNoImage').classList.add('d-none');
                } else {
                    document.getElementById('reviewImage').classList.add('d-none');
                    document.getElementById('reviewNoImage').classList.remove('d-none');
                }
            }
            
            // Image Upload handling
            const imageUploadArea = document.getElementById('imageUploadArea');
            const imagePreview = document.getElementById('imagePreview');
            const packImageInput = document.getElementById('packImage');

            // Initialize dropzone behavior
            $(imageUploadArea).on('dragover', function(e) {
                e.preventDefault();
                $(this).addClass('dragover');
            });

            $(imageUploadArea).on('dragleave drop', function(e) {
                e.preventDefault();
                $(this).removeClass('dragover');
                
                if (e.type === 'drop') {
                    packImageInput.files = e.originalEvent.dataTransfer.files;
                    handleFileSelect(e.originalEvent.dataTransfer.files[0]);
                }
            });

            // Click to browse files
            $(imageUploadArea).on('click', function() {
                packImageInput.click();
            });

            $(packImageInput).on('change', function() {
                if (this.files && this.files[0]) {
                    handleFileSelect(this.files[0]);
                }
            });

            function handleFileSelect(file) {
                // Check if file is an image
                if (!file.type.match('image.*')) {
                    Swal.fire({
                        title: 'Error!',
                        text: 'Please select an image file',
                        icon: 'error',
                        customClass: {
                            confirmButton: 'btn btn-primary'
                        },
                        buttonsStyling: false
                    });
                    return;
                }
                
                // Check file size (5MB max)
                if (file.size > 5 * 1024 * 1024) {
                    Swal.fire({
                        title: 'Error!',
                        text: 'File size should not exceed 5MB',
                        icon: 'error',
                        customClass: {
                            confirmButton: 'btn btn-primary'
                        },
                        buttonsStyling: false
                    });
                    return;
                }
                
                // Show preview
                const reader = new FileReader();
                reader.onload = function(e) {
                    imagePreview.src = e.target.result;
                    imagePreview.style.display = 'block';
                    document.getElementById('imageUploadPlaceholder').style.display = 'none';
                    document.getElementById('imagePreviewContainer').classList.remove('d-none');
                };
                reader.readAsDataURL(file);
            }
            
            // Handle remove image button
            $('#removeImage').on('click', function() {
                // Clear the file input
                $('#packImage').val('');
                // Hide preview
                $('#imagePreviewContainer').addClass('d-none');
                // Show placeholder
                $('#imageUploadPlaceholder').style.display = 'block';
                // Clear preview image
                $('#imagePreview').attr('src', '');
                
                // Update review
                $('#reviewImage').addClass('d-none');
                $('#reviewNoImage').removeClass('d-none');
            });
            
            // Server Image Browser functionality
            function loadServerImages() {
                const container = $('#serverImagesContainer');
                
                // Show loading state
                container.html(`
                    <div class="col-12 text-center py-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-2">Loading server images...</p>
                    </div>
                `);
                
                             // Fetch images from server
                $.ajax({
                    url: '{{ path('admin_pack_list_files') }}',
                    type: 'GET',
                    data: {
                        path: 'uploads/packs/Images'
                    },
                    success: function(response) {
                        console.log('Server response:', response); // Debug response
                        if (response.success) {
                            if (response.files && response.files.length > 0) {
                                let imagesHtml = '';
                                response.files.forEach(function(image) {
                                    imagesHtml += `
                                        <div class="col-md-4 col-sm-6 mb-3">
                                            <div class="card h-100 server-image-card" data-image-path="${image.path}">
                                                <div class="card-img-container">
                                                    <img src="/uploads/packs/${image.path}" alt="${image.name}" class="card-img-top">
                                                </div>
                                                <div class="card-body">
                                                    <p class="card-text small text-truncate">${image.name}</p>
                                                </div>
                                            </div>
                                        </div>
                                    `;
                                });
                                container.html(imagesHtml);
                                
                                console.log('Added ' + $('.server-image-card').length + ' image cards'); // Debug count
                                
                                // Add click handler for server image cards - using event delegation for reliability
                                $(document).off('click', '.server-image-card').on('click', '.server-image-card', function(e) {
                                    console.log('Image card clicked', $(this).data('image-path')); // Debug click
                                    e.preventDefault();
                                    
                                    // Remove selected class from all images
                                    $('.server-image-card').removeClass('selected');
                                    
                                    // Add selected class to clicked image
                                    $(this).addClass('selected');
                                    
                                    // Set the selected image path
                                    const imagePath = $(this).data('image-path');
                                    console.log('Selected image path:', imagePath); // Debug path
                                    $('#selectedServerImage').val(imagePath);
                                    
                                    // Update preview
                                    const imageUrl = $(this).find('img').attr('src');
                                    $('#imagePreview').attr('src', imageUrl);
                                    $('#imagePreview').css('display', 'block');
                                    $('#imageUploadPlaceholder').css('display', 'none');
                                    $('#imagePreviewContainer').removeClass('d-none');
                                    
                                    // Update review
                                    $('#reviewImage').attr('src', imageUrl);
                                    $('#reviewImage').removeClass('d-none');
                                    $('#reviewNoImage').addClass('d-none');
                                    
                                    // Show visual feedback
                                    Swal.fire({
                                        title: 'Image sélectionnée!',
                                        text: 'Vous avez sélectionné ' + $(this).find('.card-text').text(),
                                        icon: 'success',
                                        toast: true,
                                        position: 'top-end',
                                        showConfirmButton: false,
                                        timer: 3000
                                    });
                                });
                            } else {
                                container.html(`
                                    <div class="col-12 text-center py-5">
                                        <i class="ti ti-photo-off fs-1 text-secondary mb-2"></i>
                                        <p class="mb-0">No images found in this directory</p>
                                    </div>
                                `);
                            }
                        } else {
                            container.html(`
                                <div class="col-12 text-center py-5">
                                    <i class="ti ti-alert-triangle fs-1 text-warning mb-2"></i>
                                    <p class="mb-0">${response.message || 'Failed to load images'}</p>
                                </div>
                            `);
                        }
                    },
                    error: function(xhr, status, error) {
                        container.html(`
                            <div class="col-12 text-center py-5">
                                <i class="ti ti-alert-circle fs-1 text-danger mb-2"></i>
                                <p class="mb-0">Error loading images: ${error}</p>
                            </div>
                        `);
                    }
                });
            }
            
            // Load server images when tab is clicked
            $('#server-tab').on('click', function() {
                loadServerImages();
            });
            
            // Refresh server images
            $('#refreshServerImages').on('click', function() {
                loadServerImages();
            });
            
            // Form submission handler
            $('#createPackForm').on('submit', function(e) {
                e.preventDefault();
                
                if (!validateStep(currentStep)) {
                    showErrors(['Veuillez remplir tous les champs obligatoires.']);
                    return;
                }
                
                const formData = new FormData(this);
                
                // Add upload path information to ensure images go to the correct directory
                formData.append('uploadPath', 'public/uploads/packs/Images');
                
                // Ensure date field is properly set
                const dateField = document.getElementById('date');
                if (dateField && dateField.value) {
                    // Make sure the date is properly formatted
                    try {
                        const dateObj = new Date(dateField.value);
                        if (!isNaN(dateObj.getTime())) {
                            const formattedDate = dateObj.getFullYear() + '-' + 
                                String(dateObj.getMonth() + 1).padStart(2, '0') + '-' + 
                                String(dateObj.getDate()).padStart(2, '0');
                            formData.set('date', formattedDate);
                        }
                    } catch (e) {
                        console.error('Date parsing error:', e);
                    }
                }
                
                // Handle endDate field similarly
                const endDateField = document.getElementById('endDate');
                if (endDateField && endDateField.value) {
                    try {
                        const dateObj = new Date(endDateField.value);
                        if (!isNaN(dateObj.getTime())) {
                            const formattedDate = dateObj.getFullYear() + '-' + 
                                String(dateObj.getMonth() + 1).padStart(2, '0') + '-' + 
                                String(dateObj.getDate()).padStart(2, '0');
                            formData.set('endDate', formattedDate);
                        }
                    } catch (e) {
                        console.error('End date parsing error:', e);
                    }
                }
            
                // Show loading state
                const submitBtn = $(this).find('button[type="submit"]');
                submitBtn.html('<span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span> Création en cours...').attr('disabled', true);
                
                // Progress for form submission
                updateProgressBar(95);
                
                // Check if we're using a server image or an uploaded file
                const selectedServerImage = $('#selectedServerImage').val();
                const packImageInput = document.getElementById('packImage');
                
                console.log('Selected server image:', selectedServerImage);
                console.log('Has uploaded file:', packImageInput.files.length > 0);
                
                // Debug: Log form data
                console.log('Form data being submitted:');
                for (let pair of formData.entries()) {
                    console.log(pair[0] + ': ' + pair[1]);
                }
                
                $.ajax({
                    url: '{{ path('admin_pack_create') }}',
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function(response) {
                        console.log('Success response:', response);
                        
                        if (response.success) {
                            // Show success message
                            Swal.fire({
                                title: 'Succès!',
                                text: response.message || 'Le pack a été créé avec succès',
                                icon: 'success',
                                confirmButtonText: 'OK'
                            }).then((result) => {
                                // Redirect to admin pack page
                                window.location.href = '{{ path('admin_pack_index') }}';
                            });
                        } else {
                            // Reset button state
                            submitBtn.html('<i class="ti ti-check me-1"></i> Créer le Pack').attr('disabled', false);
                            
                            // Show error message
                            showErrors(response.message || response.errors || ['Une erreur est survenue lors de la création du pack']);
                            updateProgressBar(80);
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('AJAX error:', status, error);
                        console.log('Response:', xhr.responseText);
                        
                        // Reset button state
                        submitBtn.html('<i class="ti ti-check me-1"></i> Créer le Pack').attr('disabled', false);
                        updateProgressBar(80);
                        
                        let errorMessage = 'Une erreur inattendue est survenue. Veuillez réessayer.';
                        let errorDetails = '';
                        
                        try {
                            const response = JSON.parse(xhr.responseText);
                            if (response.message) {
                                errorMessage = response.message;
                            }
                            
                            // Add detailed debug information if available
                            if (response.debug) {
                                errorDetails += '<div class="error-details"><strong>Données reçues:</strong><pre>' + 
                                    JSON.stringify(response.debug, null, 2) + '</pre></div>';
                            }
                            
                            if (response.trace) {
                                errorDetails += '<div class="error-details"><strong>Détails techniques:</strong><pre>' + 
                                    response.file + ' (ligne ' + response.line + ')</pre></div>';
                            }
                            
                            if (response.errors && response.errors.length > 0) {
                                let errorHtml = '<ul>';
                                response.errors.forEach(function(error) {
                                    errorHtml += '<li>' + error + '</li>';
                                });
                                errorHtml += '</ul>';
                                $('.error-message').html(errorHtml).show();
                            }
                        } catch (e) {
                            console.error('Error parsing response:', e);
                        }
                        
                        // Show error message with SweetAlert
                        Swal.fire({
                            title: 'Erreur!',
                            html: errorMessage + errorDetails,
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                        
                        // Also update the error message container
                        $('.error-message').html('<p>' + errorMessage + '</p>' + errorDetails).show();
                    }
                });
            });
        
            // Initialize form
            showStep(1);
            
            // Initialize flatpickr for date inputs
            flatpickr('.flatpickr', {
                enableTime: false,
                dateFormat: 'Y-m-d',
                minDate: 'today',
                allowInput: true
            });
            
            // Set default date for the start date field
            const today = new Date();
            const formattedDate = today.getFullYear() + '-' + 
                                 String(today.getMonth() + 1).padStart(2, '0') + '-' + 
                                 String(today.getDate()).padStart(2, '0');
            
            // Get the flatpickr instance for the date field
            const dateInput = document.getElementById('date');
            if (dateInput && dateInput._flatpickr) {
                dateInput._flatpickr.setDate(formattedDate);
                // Also set the value directly to ensure it's properly set
                dateInput.value = formattedDate;
            }
        });
    </script>

    <style>
        @keyframes ripple {
            to {
                transform: scale(70);
                opacity: 0;
            }
        }
        
        /* Dropzone styling */
        .image-upload-area.dragover {
            background-color: rgba(115, 103, 240, 0.1);
            border-color: #7367f0;
        }
        
        .error-details {
            margin-top: 15px;
            padding: 10px;
            background: rgba(255, 200, 200, 0.2);
            border-radius: 8px;
            border-left: 3px solid #d33;
            font-family: monospace;
            max-height: 200px;
            overflow: auto;
        }
        
        .error-details pre {
            white-space: pre-wrap;
            word-break: break-word;
            margin: 0;
            font-size: 12px;
        }
    </style>


<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
// --- Duplicate Pack Detector (Live AJAX) ---
let duplicateDetected = false;

function debounce(fn, delay) {
    let timeout;
    return function(...args) {
        clearTimeout(timeout);
        timeout = setTimeout(() => fn.apply(this, args), delay);
    };
}

document.addEventListener('DOMContentLoaded', function() {
    const packNameInput = document.getElementById('packName');
    const descInput = document.getElementById('description');
    const form = document.getElementById('createPackForm');
    let lastCheckedValue = '';
    let warningBox = null;

    function showLiveDuplicateWarning(data) {
        if (!warningBox) {
            warningBox = document.createElement('div');
            warningBox.className = 'duplicate-warning animated fadeInDown';
            packNameInput.parentNode.insertAdjacentElement('afterend', warningBox);
        }
        warningBox.innerHTML = `
            <div style="display:flex;align-items:center;gap:10px;color:#ff5252;background:rgba(255,82,82,0.08);padding:10px 15px;border-radius:8px;margin-top:5px;box-shadow:0 2px 8px rgba(255,82,82,0.07);font-weight:500;">
                <i class="fas fa-exclamation-triangle pulse" style="font-size:1.4em;"></i>
                <span>Un pack similaire existe déjà : <b>"${data.pack.name}"</b>. <span style='font-weight:400;'>Essayez un nom plus distinctif ou modifiez la description.</span></span>
            </div>
        `;
        warningBox.style.display = '';
    }
    function hideLiveDuplicateWarning() {
        if (warningBox) warningBox.style.display = 'none';
    }

    const checkDuplicate = debounce(function() {
        const name = packNameInput.value.trim();
        const desc = descInput ? descInput.value.trim() : '';
        if (!name || name === lastCheckedValue) return;
        lastCheckedValue = name;
        fetch('/admin/pack/check-duplicate', {
            method: 'POST',
            headers: { 'X-Requested-With': 'XMLHttpRequest' },
            body: new URLSearchParams({ packName: name, description: desc })
        })
        .then(res => res.json())
        .then(data => {
            if (data.duplicate) {
                duplicateDetected = true;
                showLiveDuplicateWarning(data);
            } else {
                duplicateDetected = false;
                hideLiveDuplicateWarning();
            }
        })
        .catch(() => { duplicateDetected = false; hideLiveDuplicateWarning(); });
    }, 400);

    if (packNameInput) {
        packNameInput.addEventListener('input', checkDuplicate);
        packNameInput.addEventListener('blur', checkDuplicate);
    }

    // Prevent submission if duplicate detected
    if (form) {
        form.addEventListener('submit', function(e) {
            if (duplicateDetected) {
                e.preventDefault();
                if (warningBox) warningBox.classList.add('shake');
                setTimeout(() => warningBox && warningBox.classList.remove('shake'), 600);
                Swal.fire({
                    icon: 'warning',
                    title: 'Doublon détecté!',
                    text: 'Un pack similaire existe déjà. Veuillez modifier le nom ou la description.',
                    confirmButtonText: 'OK'
                });
                return false;
            }
        });
    }
});
// --- End Duplicate Pack Detector (Live AJAX) ---
</script>
</body>
</html>