{% extends "admin/layout.html.twig" %}

{% block title "Utilisateurs" %}

{% block title_h1 "Gestion des utilisateurs" %}

{% block stylesheets %}
  {{ parent() }}
  <link href="{{ asset("sbadmin2/vendor/datatables/dataTables.bootstrap4.min.css") }}" rel="stylesheet">
  <style>
    .user-card {
      height: 100%;
      transition: transform 0.3s;
    }
    .user-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
    }
    .user-photo {
      max-width: 100%;
      height: 150px;
      object-fit: cover;
    }
    .user-card .card-body {
      flex: 1 1 auto;
    }
    .export-pdf-btn {
      background: #4e73df;
      color: white;
      border: none;
      border-radius: 4px;
      padding: 0.375rem 0.75rem;
      margin: 10px;
    }
    #myInput {
      margin: 10px;
      max-width: 300px;
    }
    .card-footer .btn {
      padding: 0.25rem 0.5rem;
      font-size: 0.75rem;
      margin: 0.1rem;
    }
    .action-buttons {
      display: flex;
      flex-wrap: wrap;
      justify-content: space-between;
      gap: 5px;
    }
    @media (max-width: 576px) {
      .action-buttons {
        flex-direction: column;
      }
      .action-buttons .btn {
        width: 100%;
      }
    }
  </style>
{% endblock %}

{% block body %}
<div class="card shadow my-4">
    <div class="card-header py-2 d-flex align-items-center">
        <h6 class="m-0 font-weight-bold text-primary">Utilisateurs</h6>
        <a href="{{ path("admin_user_add") }}" class="btn btn-success btn-icon-split ml-auto">
            <span class="icon text-white-50">
                <i class="fas fa-plus"></i>
            </span>
            <span class="text">Ajouter un utilisateur</span>
        </a>
    </div>
    <div class="d-flex">
        <button id="btPrintUsers" class="export-pdf-btn">
            <i class="fas fa-file-pdf"></i> Export PDF
        </button>
        <input type="text" id="myInput" onkeyup="myFunction()" placeholder="Recherche..." class="form-control" id="search-input">
    </div>
    <div class="card-body">
        <div class="row" id="userCards">
            {% for user in users %}
                <div class="col-xl-3 col-lg-4 col-md-6 mb-4">
                    <div class="card user-card h-100 border-left-primary">
                        <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                            <h6 class="m-0 font-weight-bold text-primary">{{ user.firstName }} {{ user.lastName }}</h6>
                        </div>
                        <img class="user-photo" src="{{ asset('uploads/photos/' ~ user.photo) }}" alt="Profile photo">
                        <div class="card-body">
                            <p><strong>Email:</strong> {{ user.email }}</p>
                            <p><strong>Nom d'utilisateur:</strong> {{ user.username }}</p>
                            <p><strong>Type:</strong> {{ user.roleTitle }}</p>
                        </div>
                        <div class="card-footer">
                            <div class="d-flex flex-column">
                                <div class="mb-2 text-center">
                                    <img src="{{ user.qrCode }}" width="100" height="100" class="img-fluid" />
                                </div>
                                <div class="action-buttons">
                                    <a href="{{ path("admin_user_show", {"id": user.id}) }}" class="btn btn-info btn-sm mb-1">
                                        <i class="fas fa-eye fa-sm"></i> Voir
                                    </a>
                                    <a href="{{ path("admin_user_edit", {"id": user.id}) }}" class="btn btn-primary btn-sm mb-1">
                                        <i class="fas fa-edit fa-sm"></i> Modifier
                                    </a>
                                    <form action="{{ path('admin_user_toggle_verify', {'id': user.id}) }}" method="post" class="d-inline mb-1">
                                        <button type="submit" class="btn {{ user.isVerified ? 'btn-warning' : 'btn-secondary' }} btn-sm">
                                            <i class="fas fa-{{ user.isVerified ? 'ban' : 'check' }} fa-sm"></i> {{ user.isVerified ? 'Ban' : 'Unban' }}
                                        </button>
                                    </form>
                                    {% if user.roleTitle != 'Administrateur' %}
                                        <a href="{{ path("admin_user_delete", {"id": user.id}) }}" class="btn btn-danger btn-sm mb-1">
                                            <i class="fas fa-trash fa-sm"></i> Supprimer
                                        </a>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            {% endfor %}
        </div>
    </div>
</div>

<!-- Direct script tag before the end of body to ensure global availability -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
<script>
// Define global functions
window.myFunction = function() {
  var input, filter, cards, cardContainer, title, i, email, username;
  input = document.getElementById("myInput");
  filter = input.value.toUpperCase();
  cardContainer = document.getElementById("userCards");
  cards = cardContainer.getElementsByClassName("col-xl-3");
  
  for (i = 0; i < cards.length; i++) {
    // Search by name
    title = cards[i].querySelector(".card-header h6");
    // Search by email and username
    var cardBody = cards[i].querySelector(".card-body");
    if (cardBody) {
      email = cardBody.querySelector("p:nth-child(1)");
      username = cardBody.querySelector("p:nth-child(2)");
    }
    
    var titleText = title ? title.innerText.toUpperCase() : "";
    var emailText = email ? email.innerText.toUpperCase() : "";
    var usernameText = username ? username.innerText.toUpperCase() : "";
    
    if (titleText.indexOf(filter) > -1 || 
        emailText.indexOf(filter) > -1 || 
        usernameText.indexOf(filter) > -1) {
      cards[i].style.display = "";
    } else {
      cards[i].style.display = "none";
    }
  }
};

// Set up PDF export function
document.addEventListener('DOMContentLoaded', function() {
  var pdfButton = document.getElementById('btPrintUsers');
  if (pdfButton) {
    pdfButton.addEventListener('click', function() {
      try {
        // Check if jsPDF is available
        if (!window.jspdf || !window.jspdf.jsPDF) {
          alert('Erreur: La bibliothèque jsPDF n\'est pas chargée correctement.');
          return;
        }
        
        // Check if html2canvas is available
        if (!window.html2canvas) {
          alert('Erreur: La bibliothèque html2canvas n\'est pas chargée correctement.');
          return;
        }
        
        // Set up the PDF document
        window.jsPDF = window.jspdf.jsPDF;
        var doc = new jsPDF('p', 'mm', 'a4');
        
        // Get the container with all user cards
        var cardsContainer = document.getElementById('userCards');
        if (!cardsContainer) {
          alert('Erreur: Conteneur de cartes utilisateur non trouvé.');
          return;
        }
        
        // Title
        doc.setFontSize(22);
        doc.setTextColor(40, 40, 40);
        doc.text('Liste des Utilisateurs', 20, 20);
        
        // Display only visible cards (in case search is active)
        var visibleCards = [];
        var cardElements = cardsContainer.querySelectorAll('.col-xl-3');
        
        if (cardElements.length === 0) {
          alert('Erreur: Aucune carte utilisateur trouvée.');
          return;
        }
        
        Array.from(cardElements).forEach(function(card) {
          if (window.getComputedStyle(card).display !== 'none') {
            visibleCards.push(card.cloneNode(true));
          }
        });
        
        if (visibleCards.length === 0) {
          alert('Erreur: Aucune carte utilisateur visible trouvée.');
          return;
        }
        
        // Create a temporary container for the visible cards
        var tempContainer = document.createElement('div');
        tempContainer.classList.add('temp-container');
        tempContainer.style.position = 'absolute';
        tempContainer.style.top = '-9999px';
        tempContainer.style.width = '210mm'; // A4 width
        tempContainer.style.backgroundColor = 'white';
        tempContainer.style.padding = '10mm';
        
        // Create grid layout for cards
        var gridContainer = document.createElement('div');
        gridContainer.style.display = 'grid';
        gridContainer.style.gridTemplateColumns = 'repeat(2, 1fr)'; // 2 cards per row
        gridContainer.style.gap = '10mm';
        tempContainer.appendChild(gridContainer);
        
        document.body.appendChild(tempContainer);
        
        // Add each visible card to the temp container with optimized layout for PDF
        visibleCards.forEach(function(card, index) {
          try {
            // Create a new wrapper for each card
            var cardWrapper = document.createElement('div');
            cardWrapper.style.pageBreakInside = 'avoid';
            
            // Get the user-card element from the cloned card
            var userCard = card.querySelector('.user-card');
            if (userCard) {
              // Create a smaller version of the card
              var smallCard = userCard.cloneNode(true);
              smallCard.style.border = '1px solid #ddd';
              smallCard.style.borderRadius = '5px';
              smallCard.style.boxShadow = '0 2px 5px rgba(0, 0, 0, 0.1)';
              smallCard.style.overflow = 'hidden';
              smallCard.style.height = 'auto';
              
              // Make the card header smaller
              var cardHeader = smallCard.querySelector('.card-header');
              if (cardHeader) {
                cardHeader.style.padding = '5mm 3mm';
                cardHeader.style.fontSize = '12px';
              }
              
              // Make the image smaller
              var cardImage = smallCard.querySelector('.user-photo');
              if (cardImage) {
                cardImage.style.height = '25mm';
                cardImage.style.width = '25mm';
                cardImage.style.objectFit = 'cover';
              }
              
              // Simplify card body content
              var cardBody = smallCard.querySelector('.card-body');
              if (cardBody) {
                cardBody.style.padding = '3mm';
                cardBody.style.fontSize = '10px';
              }
              
              // Handle the card footer
              var cardFooter = smallCard.querySelector('.card-footer');
              if (cardFooter) {
                var qrCodeContainer = cardFooter.querySelector('.mb-2');
                if (qrCodeContainer) {
                  qrCodeContainer.style.marginBottom = '2mm';
                  
                  var qrCode = qrCodeContainer.querySelector('img');
                  if (qrCode) {
                    qrCode.style.width = '15mm';
                    qrCode.style.height = '15mm';
                  }
                }
                
                // Remove action buttons for the PDF to save space
                var actionButtons = cardFooter.querySelector('.action-buttons');
                if (actionButtons) {
                  actionButtons.remove();
                }
                
                cardFooter.style.padding = '3mm';
                cardFooter.style.fontSize = '10px';
              }
              
              // Add the modified card to the wrapper
              cardWrapper.appendChild(smallCard);
              // Add the wrapper to the grid
              gridContainer.appendChild(cardWrapper);
            }
          } catch (cardError) {
            console.error('Error processing card:', cardError);
          }
        });
        
        // Use html2canvas to capture the temp container
        html2canvas(tempContainer, {
          scale: 2, // Higher quality
          backgroundColor: 'white',
          onclone: function(clonedDoc) {
            // Apply any additional styles needed for PDF rendering
          }
        }).then(function(canvas) {
          // Calculate the number of pages needed
          var imgData = canvas.toDataURL('image/png');
          var imgWidth = 190; // mm
          var pageHeight = 297; // mm (A4)
          var imgHeight = canvas.height * imgWidth / canvas.width;
          var heightLeft = imgHeight;
          var position = 30; // starting at 30mm from top
          
          // Add the first page image
          doc.addImage(imgData, 'PNG', 10, position, imgWidth, imgHeight);
          heightLeft -= (pageHeight - position);
          
          // Add new pages if needed
          var pageCount = 1;
          while (heightLeft >= 0) {
            position = 0;
            doc.addPage();
            pageCount++;
            doc.addImage(imgData, 'PNG', 10, position, imgWidth, imgHeight);
            heightLeft -= pageHeight;
          }
          
          // Save the PDF
          doc.save('liste-utilisateurs.pdf');
          
          // Remove the temporary container
          document.body.removeChild(tempContainer);
        }).catch(function(canvasError) {
          alert('Erreur lors de la création du PDF: ' + canvasError.message);
          // Clean up
          if (document.body.contains(tempContainer)) {
            document.body.removeChild(tempContainer);
          }
        });
      } catch (error) {
        alert('Erreur lors de la génération du PDF: ' + error.message);
      }
    });
  }
});

function printCard() {
    var cardFooter = document.querySelector('.card-footer');
    if (cardFooter) {
        cardFooter.style.marginBottom = '2mm';
    }
}
</script>
{% endblock %}

{% block javascripts %}
  {{ parent() }}
  <script src="{{ asset("sbadmin2/vendor/datatables/jquery.dataTables.min.js") }}"></script>
  <script src="{{ asset("sbadmin2/vendor/datatables/dataTables.bootstrap4.min.js") }}"></script>
{% endblock %}