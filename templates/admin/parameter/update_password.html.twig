{% extends "admin/layout.html.twig" %}

{% block title "Paramètre" %}

{% block title_h1 "Modifier mon mot de passe" %}

{# Add form theme directive #}
{% form_theme form _self %}

{# Define blocks using proper prefixes #}
{% block form_errors %}
    {% if errors|length > 0 %}
    <div class="alert alert-danger">
        <ul class="mb-0">
            {% for error in errors %}
                <li>{{ error.message }}</li>
            {% endfor %}
        </ul>
    </div>
    {% endif %}
{% endblock %}

{% block button_widget %}
    {% set attr = attr|merge({class: (attr.class|default('') ~ ' btn btn-primary')|trim}) %}
    <button type="{{ type|default('button') }}" {{ block('button_attributes') }}>{{ label|default('') }}</button>
{% endblock %}

{% block button_row %}
    <div class="form-group">
        {{ form_widget(form) }}
        {{ form_errors(form) }}
    </div>
{% endblock %}

{% block submit_widget %}
    {% set attr = attr|merge({class: (attr.class|default('') ~ ' btn btn-primary')|trim}) %}
    <button type="submit" {{ block('button_attributes') }}>
        <i class="fas fa-save mr-2"></i>{{ label|default('Mettre à jour mon mot de passe') }}
    </button>
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .password-update-card {
            border-radius: 0.5rem;
            box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.15);
            border: 0;
        }
        
        .password-update-card .card-header {
            background-color: #f8f9fc;
            border-bottom: 1px solid #e3e6f0;
            padding: 1rem 1.25rem;
        }
        
        .password-update-card .card-header h6 {
            margin-bottom: 0;
            font-weight: 700;
            color: #4e73df;
        }
        
        .password-update-card .card-body {
            padding: 1.5rem;
        }
        
        .form-group {
            margin-bottom: 1.25rem;
        }
        
        .form-control {
            display: block;
            width: 100%;
            padding: 0.5rem 0.75rem;
            font-size: 1rem;
            font-weight: 400;
            color: #6e707e;
            background-color: #fff;
            border: 1px solid #d1d3e2;
            border-radius: 0.35rem;
            transition: border-color .15s ease-in-out, box-shadow .15s ease-in-out;
        }
        
        .form-control:focus {
            color: #6e707e;
            background-color: #fff;
            border-color: #bac8f3;
            outline: 0;
            box-shadow: 0 0 0 0.25rem rgba(78, 115, 223, 0.25);
        }
        
        .input-group {
            position: relative;
            display: flex;
            flex-wrap: wrap;
            align-items: stretch;
            width: 100%;
        }
        
        .input-group-text {
            display: flex;
            align-items: center;
            padding: 0.375rem 0.75rem;
            font-size: 1rem;
            font-weight: 400;
            line-height: 1.5;
            color: #6e707e;
            text-align: center;
            white-space: nowrap;
            background-color: #f8f9fc;
            border: 1px solid #d1d3e2;
            border-radius: 0.35rem 0 0 0.35rem;
        }
        
        .input-group .form-control {
            border-top-left-radius: 0;
            border-bottom-left-radius: 0;
        }
        
        .input-group-append {
            margin-left: -1px;
        }
        
        .input-group > .input-group-append > .input-group-text {
            border-top-left-radius: 0;
            border-bottom-left-radius: 0;
            border-top-right-radius: 0.35rem;
            border-bottom-right-radius: 0.35rem;
            cursor: pointer;
        }
        
        .btn-primary {
            color: #fff;
            background-color: #4e73df;
            border-color: #4e73df;
            padding: 0.5rem 1rem;
            font-size: 1rem;
            border-radius: 0.35rem;
            transition: all .15s ease-in-out;
        }
        
        .btn-primary:hover {
            background-color: #4262c5;
            border-color: #3d5cb8;
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(78, 115, 223, 0.3);
        }
        
        .password-requirement {
            color: #858796;
            font-size: 0.875rem;
            margin-top: 0.5rem;
        }
        
        .password-requirement i {
            margin-right: 0.25rem;
        }
        
        .password-requirement.valid {
            color: #1cc88a;
        }
        
        .password-requirement.invalid {
            color: #e74a3b;
        }
    </style>
{% endblock %}

{% block body %}
<div class="container-fluid">
    <div class="row justify-content-center">
        <div class="col-xl-6 col-lg-8 col-md-10">
            <div class="password-update-card card shadow mb-4">
                <div class="card-header py-3 d-flex flex-row align-items-center">
                    <h6 class="m-0 font-weight-bold text-primary">
                        <i class="fas fa-key mr-2"></i>Modification du mot de passe
                    </h6>
                </div>
                <div class="card-body">
                    {{ form_start(form, {'attr': {'id': 'password-form', 'novalidate': 'novalidate'}}) }}
                    
                    {% for field in form %}
                        {% if field.vars.block_prefixes[1] != '_token' and field.vars.block_prefixes[1] != 'submit' %}
                            <div class="form-group">
                                {{ form_label(field, null, {'label_attr': {'class': 'form-label'}}) }}
                                <div class="input-group">
                                    <span class="input-group-text">
                                        <i class="fas fa-lock"></i>
                                    </span>
                                    {{ form_widget(field, {'attr': {
                                        'class': 'form-control password-input',
                                        'placeholder': 'Entrez votre mot de passe'
                                    }}) }}
                                    <div class="input-group-append">
                                        <span class="input-group-text toggle-password">
                                            <i class="fas fa-eye-slash"></i>
                                        </span>
                                    </div>
                                </div>
                                {{ form_errors(field) }}
                                
                                {% if loop.index == 2 %}
                                    <div class="password-requirements mt-2">
                                        <div class="password-requirement" id="req-length">
                                            <i class="fas fa-circle"></i> Minimum 8 caractères
                                        </div>
                                        <div class="password-requirement" id="req-uppercase">
                                            <i class="fas fa-circle"></i> Au moins une majuscule
                                        </div>
                                        <div class="password-requirement" id="req-lowercase">
                                            <i class="fas fa-circle"></i> Au moins une minuscule
                                        </div>
                                        <div class="password-requirement" id="req-number">
                                            <i class="fas fa-circle"></i> Au moins un chiffre
                                        </div>
                                        <div class="password-requirement" id="req-special">
                                            <i class="fas fa-circle"></i> Au moins un caractère spécial
                                        </div>
                                    </div>
                                {% endif %}
                            </div>
                        {% endif %}
                    {% endfor %}
                    
                    <div class="d-flex justify-content-end">
                        {% if form.save is defined %}
                            {{ form_widget(form.save) }}
                        {% else %}
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-save mr-2"></i>Mettre à jour mon mot de passe
                            </button>
                        {% endif %}
                    </div>
                    
                    {{ form_end(form) }}
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        // Toggle password visibility
        const toggleButtons = document.querySelectorAll('.toggle-password');
        toggleButtons.forEach(function(button) {
            button.addEventListener('click', function() {
                const passwordField = this.closest('.input-group').querySelector('.password-input');
                const icon = this.querySelector('i');
                
                if (passwordField.type === 'password') {
                    passwordField.type = 'text';
                    icon.classList.replace('fa-eye-slash', 'fa-eye');
                } else {
                    passwordField.type = 'password';
                    icon.classList.replace('fa-eye', 'fa-eye-slash');
                }
            });
        });
        
        // Password strength validation
        const passwordInputs = document.querySelectorAll('.password-input');
        if (passwordInputs.length >= 2) {
            // Assuming the second input is for the new password
            const newPassword = passwordInputs[1];
            
            newPassword.addEventListener('input', function() {
                const value = this.value;
                
                // Length check
                const reqLength = document.getElementById('req-length');
                if (reqLength) {
                    if (value.length >= 8) {
                        reqLength.classList.add('valid');
                        reqLength.classList.remove('invalid');
                        reqLength.querySelector('i').classList.replace('fa-circle', 'fa-check-circle');
                    } else {
                        reqLength.classList.add('invalid');
                        reqLength.classList.remove('valid');
                        reqLength.querySelector('i').classList.replace('fa-check-circle', 'fa-circle');
                    }
                }
                
                // Uppercase check
                const reqUppercase = document.getElementById('req-uppercase');
                if (reqUppercase) {
                    if (/[A-Z]/.test(value)) {
                        reqUppercase.classList.add('valid');
                        reqUppercase.classList.remove('invalid');
                        reqUppercase.querySelector('i').classList.replace('fa-circle', 'fa-check-circle');
                    } else {
                        reqUppercase.classList.add('invalid');
                        reqUppercase.classList.remove('valid');
                        reqUppercase.querySelector('i').classList.replace('fa-check-circle', 'fa-circle');
                    }
                }
                
                // Lowercase check
                const reqLowercase = document.getElementById('req-lowercase');
                if (reqLowercase) {
                    if (/[a-z]/.test(value)) {
                        reqLowercase.classList.add('valid');
                        reqLowercase.classList.remove('invalid');
                        reqLowercase.querySelector('i').classList.replace('fa-circle', 'fa-check-circle');
                    } else {
                        reqLowercase.classList.add('invalid');
                        reqLowercase.classList.remove('valid');
                        reqLowercase.querySelector('i').classList.replace('fa-check-circle', 'fa-circle');
                    }
                }
                
                // Number check
                const reqNumber = document.getElementById('req-number');
                if (reqNumber) {
                    if (/[0-9]/.test(value)) {
                        reqNumber.classList.add('valid');
                        reqNumber.classList.remove('invalid');
                        reqNumber.querySelector('i').classList.replace('fa-circle', 'fa-check-circle');
                    } else {
                        reqNumber.classList.add('invalid');
                        reqNumber.classList.remove('valid');
                        reqNumber.querySelector('i').classList.replace('fa-check-circle', 'fa-circle');
                    }
                }
                
                // Special character check
                const reqSpecial = document.getElementById('req-special');
                if (reqSpecial) {
                    if (/[!@#$%^&*(),.?":{}|<>]/.test(value)) {
                        reqSpecial.classList.add('valid');
                        reqSpecial.classList.remove('invalid');
                        reqSpecial.querySelector('i').classList.replace('fa-circle', 'fa-check-circle');
                    } else {
                        reqSpecial.classList.add('invalid');
                        reqSpecial.classList.remove('valid');
                        reqSpecial.querySelector('i').classList.replace('fa-check-circle', 'fa-circle');
                    }
                }
            });
            
            // Match passwords validation
            if (passwordInputs.length >= 3) {
                // Assuming the third input is for the password confirmation
                const confirmPassword = passwordInputs[2];
                
                const form = document.getElementById('password-form');
                form.addEventListener('submit', function(e) {
                    if (newPassword.value !== confirmPassword.value) {
                        confirmPassword.classList.add('is-invalid');
                        const errorDiv = document.createElement('div');
                        errorDiv.classList.add('invalid-feedback');
                        errorDiv.textContent = 'Les mots de passe ne correspondent pas';
                        confirmPassword.parentNode.appendChild(errorDiv);
                        e.preventDefault();
                    }
                });
            }
        }
    });
    </script>
{% endblock %}