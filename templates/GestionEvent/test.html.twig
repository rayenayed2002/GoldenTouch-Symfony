{% extends 'base.html.twig' %}

{% block content %}
<h6 class="pb-1 mb-4 text-muted">Events Grid</h6>
<div class="container-fluid px-xl-6">
  <div class="row row-cols-1 row-cols-md-3 g-4 mb-5">
            {% for event in events %}
                <div class="col">
                    <div class="card h-100 card-hover position-relative">
                        <a href="{{ path('app_event_show', {'id': event.id}) }}" 
                           class="stretched-link text-decoration-none"
                           aria-label="View {{ event.nom }} details">
                            <div class="card-img-frame p-3 pb-0">
                                {% if event.photo %}
                                    <img class="card-img-top rounded" 
                                         src="{{ asset('uploads/' ~ event.photo) }}" 
                                         alt="{{ event.nom }}" 
                                         style="object-fit: cover; height: 180px; width: 100%;">
                                {% else %}
                                    <div class="bg-secondary text-white d-flex align-items-center justify-content-center rounded"
                                         style="height: 180px; width: 100%;">
                                        No Image
                                    </div>
                                {% endif %}
                            </div>

                            <div class="card-body">
                                <h5 class="card-title text-dark mb-2">{{ event.nom }}</h5>
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <span class="badge bg-primary">
                                        {{ categoryLabels[event.categorie.value ?? ''] ?? 'Non catégorisé' }}
                                    </span>
                                </div>
                                <div class="d-flex justify-content-between align-items-center">
                                    <small class="text-muted">{{ event.date|date('M d, Y') }}</small>
                                </div>
                            </div>
                        </a>

                        <div class="position-absolute end-0 bottom-0 m-3 d-flex gap-2 z-1">
                            <a href="#" 
                               class="btn btn-icon text-warning"
                               data-bs-toggle="modal" 
                               data-bs-target="#editEventModal"
                               data-event-id="{{ event.id }}"
                               data-event-name="{{ event.nom }}"
                               data-event-date="{{ event.date|date('Y-m-d') }}"
                               data-event-category="{{ event.categorie.value ?? '' }}"
                               data-event-photo="{{ event.photo ? app.request.schemeAndHttpHost ~ '/uploads/' ~ event.photo : '' }}">
                                <i class="fas fa-edit"></i>
                            </a>
                            <form action="{{ path('app_event_delete', {'id': event.id}) }}" method="POST" style="display: inline;" class="delete-form">
                                <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ event.id) }}">
                                <button type="submit" class="btn btn-icon text-danger" aria-label="Delete {{ event.nom }}" onclick="confirmDelete(event, this)">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </form>
                        </div>
                    </div>
                </div>
            {% else %}
                <div class="col-12">
                    <div class="alert alert-info">No events found.</div>
                </div>
            {% endfor %}
        </div>
    </div>

    <!-- Edit Event Modal -->
    <div class="modal fade" id="editEventModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-simple modal-edit-event">
            <div class="modal-content p-3 p-md-5">
                <div class="modal-body">
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    <div class="text-center mb-4">
                        <h3 class="mb-2">Edit Event Information</h3>
                        <p class="text-muted">Modify event details below.</p>
                    </div>
                    <form id="editEventForm" class="row g-3" action="{{ path('app_event_edit', {'id': '__ID__'}) }}" method="POST" enctype="multipart/form-data">
                        <input type="hidden" name="_token" value="{{ csrf_token('edit-event') }}">
                        
                        <!-- Event Name -->
                        <div class="col-12">
                            <label class="form-label" for="eventName">Event Name</label>
                            <input type="text" id="eventName" name="nom" class="form-control" required>
                        </div>

                        <!-- Date -->
                        <div class="col-12 col-md-6">
                            <label class="form-label" for="eventDate">Date</label>
                            <input type="date" id="eventDate" name="date" class="form-control" required>
                        </div>

                        <!-- Category -->
                        <div class="col-12 col-md-6">
                            <label class="form-label" for="eventCategory">Category</label>
                            <select id="eventCategory" name="categorie" class="form-select" required>
                                {% for value, label in categoryLabels %}
                                    <option value="{{ value }}">{{ label }}</option>
                                {% endfor %}
                            </select>
                        </div>

                        <!-- Photo Upload -->
                        <div class="col-12">
                            <label class="form-label" for="eventPhoto">Event Photo</label>
                            <input type="file" id="eventPhoto" name="photo" class="form-control" accept="image/*">
                            <div class="mt-3">
                                <p class="mb-1">Current Photo:</p>
                                <img id="currentPhotoPreview" src="" class="img-thumbnail" style="max-width: 200px; display: none;">
                            </div>
                        </div>

                        <div class="col-12 text-center">
                            <button type="submit" class="btn btn-primary me-sm-3 me-1">Save Changes</button>
                            <button type="button" class="btn btn-label-secondary" data-bs-dismiss="modal">Cancel</button>
                        </div>
                    </form>
                </div>
            </div>
 
 </div>
</div>

{% endblock %}

{% block stylesheets %}
{{ parent() }}

<style>
  .btn-icon {
    padding: 0.5rem;
    transition: all 0.2s ease;
    background: transparent;
    border: none;
  }
  
  .btn-icon:hover {
    transform: scale(1.1);
    background: rgba(0, 0, 0, 0.05);
    border-radius: 50%;
  }
  
  .btn-icon:focus {
    box-shadow: none;
  }
.card.card-hover {
  transition: transform 0.25s ease, box-shadow 0.25s ease, border-color 0.25s ease;
  border: 3px solid transparent; /* ensures border transition works */
}

.card.card-hover:hover {
  transform: translateY(-8px);
  box-shadow: 0 12px 30px rgba(0, 0, 0, 0.25);
  border-color: gold;
}
.stretched-link {
  z-index: 0;
}


</style>
{% endblock %}

{% block javascripts %}
{{ parent() }}

<script>
function confirmDelete(event, button) {
  event.preventDefault();

  if (confirm('Are you sure?')) {
    const form = button.closest('form');
    const formData = new FormData(form);

    fetch(form.action, {
      method: 'POST',
      body: formData,
      headers: { 'X-Requested-With': 'XMLHttpRequest' }
    })
    .then(response => {
      if (!response.ok) throw new Error('Network error');
      return response.json();
    })
    .then(data => {
      if (data.success) {
        // Remove the closest column parent
        button.closest('.col').remove();
        alert('Deleted successfully!');
      } else {
        alert('Error: Token might be invalid');
      }
    })
    .catch(error => {
      console.error('Error:', error);
      alert('Deletion failed. Check console');
    });
  }
}



document.addEventListener('DOMContentLoaded', function() {
  const editModalElement = document.getElementById('editEventModal');
  const editModal = new bootstrap.Modal(editModalElement);
  const editForm = document.getElementById('editEventForm');
  let currentEventId = null;

  // Modal show handler
  editModalElement.addEventListener('show.bs.modal', function(event) {
    const button = event.relatedTarget;
    const photoPreview = editModalElement.querySelector('#currentPhotoPreview');
    
    currentEventId = button.dataset.eventId;
    editForm.action = editForm.action.replace('__ID__', currentEventId);
    
    // Populate form values
editForm.eventName.value = button.dataset.eventName;
editForm.eventDate.value = button.dataset.eventDate;
editForm.eventCategory.value = button.dataset.eventCategory;

    // Handle photo preview
    photoPreview.style.display = button.dataset.eventPhoto ? 'block' : 'none';
    photoPreview.src = button.dataset.eventPhoto || '';
  });

  // Form submission handler
  editForm.addEventListener('submit', async function(e) {
    e.preventDefault();
    const submitButton = this.querySelector('button[type="submit"]');
    const originalButtonText = submitButton.innerHTML;

    try {
      submitButton.innerHTML = `
        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
        Saving...
      `;
      submitButton.disabled = true;

      const response = await fetch(this.action, {
        method: 'POST',
        body: new FormData(this),
        headers: {'X-Requested-With': 'XMLHttpRequest'}
      });

      const data = await response.json();

      if (!response.ok || !data.success) {
        throw new Error(data.message || 'Update failed');
      }

      // Update elements
      const photoPreview = editModalElement.querySelector('#currentPhotoPreview');
      const editButton = document.querySelector(
        `[data-event-id="${currentEventId}"] [data-bs-target="#editEventModal"]`
      );

      // Update modal preview
      if (data.photo) {
        const newSrc = `${data.photo}?t=${Date.now()}`; // Cache bust
        photoPreview.src = newSrc;
        photoPreview.style.display = 'block';
        
        // Update edit button data attribute
        if (editButton) {
          editButton.dataset.eventPhoto = data.photo;
        }
      } else {
        photoPreview.style.display = 'none';
        if (editButton) {
          editButton.dataset.eventPhoto = '';
        }
      }

      // Close modal after 1 second
      setTimeout(() => editModal.hide(), 1000);

    } catch (error) {
      console.error('Error:', error);
      alert(`Error: ${error.message}`);
    } finally {
      submitButton.innerHTML = originalButtonText;
      submitButton.disabled = false;
    }
  });
});












document.addEventListener('DOMContentLoaded', function() {
    const cartIcon = document.getElementById('cartIcon');
    
    // Make event cards draggable
    document.querySelectorAll('.card').forEach(card => {
        card.draggable = true;
        
        card.addEventListener('dragstart', (e) => {
            const eventId = card.querySelector('[data-event-id]').dataset.eventId;
            const eventData = {
                idEvent: eventId,
                iduser: 1, // Static user ID
                typeEvent: "event",
                categorie: card.querySelector('.badge').innerText,
                date: card.querySelector('small').innerText,
                price: 100 // Static price
            };
            
            e.dataTransfer.setData('application/json', JSON.stringify(eventData));
            e.dataTransfer.effectAllowed = 'move';
        });
    });

    // Cart drop zone
    cartIcon.addEventListener('dragover', (e) => {
        e.preventDefault();
        cartIcon.style.opacity = '0.7';
    });

    cartIcon.addEventListener('dragleave', () => {
        cartIcon.style.opacity = '1';
    });

    cartIcon.addEventListener('drop', async (e) => {
        e.preventDefault();
        cartIcon.style.opacity = '1';
        
        try {
            const eventData = JSON.parse(e.dataTransfer.getData('application/json'));
            
            const response = await fetch('{{ path("app_panier_add") }}', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify(eventData)
            });
            
            if (response.ok) {
                const badge = cartIcon.querySelector('.badge');
                badge.textContent = parseInt(badge.textContent) + 1;
                alert('Event added to cart!');
            }
        } catch (error) {
            console.error('Error:', error);
            alert('Error adding to cart');
        }
    });
});
</script>

{% endblock %}